---
title: "Take-home_Exercise03"
author: "guyue"
execute: 
  eval: true
  echo: true
  warning: false
---

# 1.0 Background

### According to an office report as shown in the infographic below

-   The contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced.

    ![](images/Climate_change.jpg){width="742"}

# 2.0 Task

-   Select either daily temperature or rainfall records of a month of the year 1983, 1993, 2003, 2013 and 2023 and create an analytics-driven data visualisation,

-   Apply appropriate interactive techniques to enhance the user experience in data discovery and/or visual story-telling.

# 3.0 Data preparation

1.0 Read all files (May and December rainfall data from 1983,1993,2003,2013,2023, respectively)

2.0 YMD,YD,YM are generated based on the year, month, and day of the list

3.0 Change the name of Daily Rainfall Total (mm) to DailyRF

```{r}
pacman::p_load(plotly, ggtern, tidyverse,haven,ggdist, ggridges, ggthemes,
               colorspace, tidyverse,patchwork)
```

```{r}
f198305 <- read_csv("data/198305.csv")
f198312 <- read_csv("data/198312.csv")
f199305 <- read_csv("data/199305.csv")
f199312 <- read_csv("data/199312.csv")
f200305 <- read_csv("data/200305.csv")
f200312 <- read_csv("data/200312.csv")
f201305 <- read_csv("data/201305.csv")
f201312 <- read_csv("data/201312.csv")
f202305 <- read_csv("data/202305.csv")
f202312 <- read_csv("data/202312.csv")
```

```{R}
colnames(f202305) <- colnames(f198305)
colnames(f202312) <- colnames(f198305)

```

```{r}
combined_data <- rbind(f198305,f202305,f201305,f200305,f199305,f198312,f199312,f200312,f201312,f202312 )

```

```{r}
combined_data$YMD <- as.Date(paste(combined_data$Year, combined_data$Month, combined_data$Day, sep = "-"), format = "%Y-%m-%d")
```

```{r}
combined_data$YM <- paste(combined_data$Year, sprintf("%02d", combined_data$Month), sep = "-")
```

```{r}
combined_data$YD <- paste(combined_data$Year, sprintf("%02d", combined_data$Day), sep = "-")
```

```{r}
colnames(combined_data)[colnames(combined_data) == "Daily Rainfall Total (mm)"] <- "DailyRF"
```

# 4.0 Analytics-driven data visualization

This data visualization describes the daily distribution of rainfall in specific locations in May and December in different years.

First, I chose cloud maps and bar charts to show the precipitation distribution in May and December of each selected year.

The graph on the [left]{.underline} is a ridge plot showing the distribution density of daily rainfall in May and December in different years. As you can see from this graph, the distribution of rainfall varies significantly from year to year. For each time period (such as May 1983, December 1983, etc.), the ridge plot shows the density distribution of rainfall for that month, with the peak indicating the range with the highest frequency of rainfall for that month. The color code represents the rainfall quartile, and most of the peaks are concentrated in the lower rainfall range, but there are a few years in December with high rainfall frequency peaks.

From the left, most of the rainfall in May rarely exceeds 75mm, on the contrary, the rainfall in December will be more widely distributed, and there will be heavy rainfall.

On the [right]{.underline} is the distribution of rainfall days.  There is a large gap between the rainfall days of May and December in 1983,2003,2023, while the gap between 1993 and 2013 is not very large.

It can also be seen that in the same month of May, but after 1993, the annual rainfall did not show an increase in the number of rain days, which may be related to the hot weather.  

From December 1983 to 2023, the number of days of rainfall every year is increasing, especially in December 2023, when it rains almost every day.  

The number of days of rainfall in May is fluctuating, but the number of days of rainfall in December is increasing, resulting in a growing gap between the number of days of rainfall between May and December.

```{r }
p1 <- ggplot(combined_data,
       aes(x = DailyRF,
           y = YM,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
    xlab(" Daily Rainfall Total (mm)") +
  ylab("1983-2023") + 
  ggtitle("Total Daily Rainfall Distribution in May and December each year") 
  theme_ridges()
```

```{r}
combined_clean_data <- subset(combined_data, DailyRF != 0)
```

```{r}
p2 <- ggplot(data=combined_clean_data, 
       aes(x=YM)) +
  geom_bar()+
  xlab(" 1983-2023") +
  ylab("Frequency of Rainfall") + 
  ggtitle("Rainfall Distribution in May and December each year") 
```

```{r fig.width=15, fig.height=8}
p1 + p2
```

# 5.0 Interactive techniques

## Here is a way to help others to interact in a way that allows others to gain a better understanding of rainfall. The first section consists of two sections, the daily rainfall from May 1982,1993,2003,2013,2023, and the right from December. You can click on any point to query, and then it will display the information of this point - year month day + the daily rainfall, in another map will show the same year on the same day of different months of rainfall, and then we can compare.

```{r}

May <- subset(combined_data, Month == 5)


Dec <- subset(combined_data, Month == 12)

```

```{r}
may_data <- subset(combined_data, Month == 5, select = c(Year, Month, Day, DailyRF,YMD,YD))
new_data <- may_data[, c("Year", "Day", "DailyRF","YMD","YD")]
names(new_data)[names(new_data) == "DailyRF"] <- "may_DailyRF"

dec_data <- subset(combined_data, Month == 12, select = c(Year, Month, Day, DailyRF,YMD,YD))
dec_data <- subset(dec_data, select = c(Year, Day, DailyRF,YMD,YD))
names(dec_data)[names(dec_data) == "DailyRF"] <- "Dec_DailyRF"

new_data <- merge(new_data, dec_data, by = c("Year", "Day"), all = TRUE)




```

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

## Model1: Here is the interactive system I made \-\-\-- in the same year and the same day, to see the difference in rainfall in different months (5 and 12), the right is December, the left is May. For example, as shown in the picture, when you click on any point, it reflects the rainfall from December to 20, 1993(right), and the rainfall from May 20, 1993（left）-so that you can use this system to find the rainfall of the same year on the same day and different months. The downside of this is that when I click on the left side, it only shows the right side but not the right side, even though I've filled in the code for the right side to show the content.

```{r}
new_data$tooltip1 <- c(paste0(     
  "DATE = ", new_data$YMD.x, 
  "\n Daily Rainfall = ", new_data$may_DailyRF)) 

new_data$tooltip2 <- c(paste0(     
  "DATE = ", new_data$YMD.y, 
  "\n Daily Rainfall = ", new_data$Dec_DailyRF)) 


p10 <- ggplot(new_data, 
       aes(x = Day,
           y = may_DailyRF)) +
  geom_point_interactive(
    aes(data_id = YD.x,
        tooltip = new_data$tooltip1), 
    stackgroups = TRUE,
    binwidth = 1) +   
   xlab(" Day") +
  ylab("Total Daily Rainfall") + 
  ggtitle("Daily Rainfall in May") 



p20 <- ggplot(new_data, 
       aes(x = Day,
           y = Dec_DailyRF)) +
  geom_point_interactive(
    aes(data_id = YD.x,
        tooltip = new_data$tooltip2), 
    stackgroups = TRUE,
    binwidth = 1) +   
 xlab(" Day") +
  ylab("Total Daily Rainfall") + 
  ggtitle("Daily Rainfall in Dec") 

girafe(code = print(p10 + p20), 
       width_svg = 6,
       height_svg = 3
       ) 

```

## Model2: So I plan to use another method to improve it, and I use the following system. This interactive system can indeed improve the above shortcomings. Now I can display content on both the left and right sides, but I cannot add more information, such as modifying the horizontal coordinate title and so on. So I kept these two interactive systems, and that's my design.

```{r}
d <- highlight_key(new_data)
p1 <- ggplot(data=d, 
            aes(x = Day,
                y = may_DailyRF)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,40),
                  ylim=c(0,200))

p2 <- ggplot(data=d, 
            aes(x =Day,
                y = Dec_DailyRF)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,40),
                  ylim=c(0,200))
subplot(ggplotly(p1),
        ggplotly(p2))
```
